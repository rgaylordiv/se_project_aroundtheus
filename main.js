!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this._errorElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorElement.textContent=this._errorMessage,this._errorElement.classList.add(this._errorClass)}_hideInputError(e){this._errorElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):(this._errorMessage=e.validationMessage,this._showInputError(e,this._errorMessage))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeClick())),this._deleteButton.addEventListener("click",(()=>this._handleDeleteClick())),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name,src:this._link})}))}_handleLikeClick(){this._likeButton.classList.toggle("active")}_handleDeleteClick(){this._element.remove(),this._element=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__button"),this._deleteButton=this._element.querySelector(".card__trash"),this._cardImage=this._element.querySelector(".card__image"),this._cardImage.setAttribute("src",this._link),this._cardImage.alt=this._name,this._cardTitle=this._element.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._element}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupElement.querySelectorAll(".modal__form-input")}_getInputValues(){return this._formValue={},this._inputList.forEach((e=>{console.log(`Input Name: ${e.name}, Input Value: ${e.value}`),this._formValue[e.name]=e.value})),this._formValue}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this._popupForm.reset()})),super.setEventListeners()}}document.forms["edit-form"];const r=document.forms["add-form"],i=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__name"),a=document.querySelector(".profile__bio"),l=document.querySelector("#profile-name-input"),c=document.querySelector("#profile-bio-input"),u=document.querySelector(".profile__add-button"),_=(r.querySelector(".modal__input_type_title"),r.querySelector(".modal__input_type_url"),document.querySelector(".cards__list"),document.querySelector("#image").querySelector(".modal__image"),document.querySelector(".modal__description"),new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=v(e);_.addItem(t)}},".cards__list"));_.renderItems();const m=new class extends s{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._imageTitle=this._popupElement.querySelector(".modal__description")}open(e){this._image.src=e.link,this._image.alt=e.name,this._imageTitle.textContent=e.name,super.open()}}("#image");m.setEventListeners();const d=new n("#edit",(function(e){console.log(e);const t=e.name,s=e.bio;p.setUserInfo(t,s),d.close()}));d.setEventListeners();const h=new n("#add",(function(e){const t=e.title,s=e.image;console.log(`Name: ${t}, Link: ${s}`),function(e){const t=v(e);_.addItem(t)}({name:t,link:s}),h.close(),r.reset()}));h.setEventListeners();const p=new class{constructor(e,t){this._profileName=e,this._jobProfile=t}getUserInfo(){return{name:this._profileName.textContent,job:this._jobProfile.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._jobProfile.textContent=t}}(o,a),f={};var E;E={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},Array.from(document.querySelectorAll(E.formSelector)).forEach((t=>{const s=new e(E,t),n=t.getAttribute("id");f[n]=s,s.enableValidation()}));const g=f["add-form"];function v(e){return new t(e,"#card-template",S).getView()}function S(e){m.open(e)}i.addEventListener("click",(()=>{const e=p.getUserInfo();l.value=e.name,c.value=e.job,d.open()})),u.addEventListener("click",(function(){h.open(),g.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,