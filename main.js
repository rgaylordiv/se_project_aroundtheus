!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this._errorElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorElement.textContent=this._errorMessage,this._errorElement.classList.add(this._errorClass)}_hideInputError(e){this._errorElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):(this._errorMessage=e.validationMessage,this._showInputError(e,this._errorMessage))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,s,r,i,o){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=r,this._handleCardLike=i,this._handelCardDislike=o,this._id=e._id,this._isLiked=e.isLiked}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._isLiked?this._handelCardDislike(this):this._handleCardLike(this)})),this._deleteButton.addEventListener("click",(()=>{console.log("trash clicked"),this._handleDeleteButton(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name,src:this._link})}))}removeCard(){this._element.remove(),this._element=null}cardIsLiked(e){this._isLiked=e,this.showLikes()}showLikes(){this._isLiked?this._likeButton.classList.add("active"):this._likeButton.classList.remove("active")}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._element=this._getTemplate(),this._modal=document.querySelector(".modal"),this._likeButton=this._element.querySelector(".card__button"),this._deleteButton=this._element.querySelector(".card__trash"),this._cardImage=this._element.querySelector(".card__image"),this._cardImage.setAttribute("src",this._link),this._cardImage.alt=this._name,this._cardTitle=this._element.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this.showLikes(),this._element}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){console.log("closing modal"),this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{console.log(`${e}`),"Escape"===e.key&&this.close()};setEventListeners(){console.log("Setting event listeners"),this._popupElement.addEventListener("click",(e=>{console.log(`Clicked element: ${e.target.className}`),(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupElement.querySelectorAll(".modal__form-input"),this._submitBtn=this._popupElement.querySelector(".modal__button"),this._submitBtnText=this._submitBtn.textContent}_getInputValues(){return this._formValue={},this._inputList.forEach((e=>{console.log(`Input Name: ${e.name}, Input Value: ${e.value}`),this._formValue[e.name]=e.value})),this._formValue}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)})),super.setEventListeners()}}document.querySelector(".modal"),document.querySelector("#profile");const i=document.forms["edit-form"],o=document.forms["add-form"],n=document.forms["profile-form"],l=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__name"),c=document.querySelector(".profile__bio"),h=document.querySelector("#profile-name-input"),d=document.querySelector("#profile-bio-input"),u=document.querySelector(".profile__add-button"),_=(o.querySelector(".modal__input_type_title"),o.querySelector(".modal__input_type_url"),document.querySelector(".profile__image-edit")),m=document.querySelector(".profile__image"),p=(document.querySelector("#profile-image-url-input"),document.querySelector(".cards__list"),document.querySelector("#card-template"),document.querySelector(".card"),document.querySelector(".card__button"),document.querySelector("#delete-button"),document.querySelector("#delete"),document.querySelector("#image").querySelector(".modal__image"),document.querySelector(".modal__description"),new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}updateProfileInfo(e,t){return console.log(`Updating profile with name: ${e}, about: ${t}`),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse).then((e=>(console.log("API response:",e),e)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}createCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return console.log("Deleting card with ID:",e),fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2d74b34c-f524-4ec8-a70b-ae8ff175319b","Content-Type":"application/json"}})),f=new class{constructor(e,t){let{items:s,renderer:r}=e;this.items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this.items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=B(e);f.addItem(t)}},".cards__list"),g=new class{constructor(e,t,s){this._profileName=e,this._profileBio=t,this._profileImage=s}getUserInfo(){return{name:this._profileName.textContent,job:this._profileBio.textContent,image:this._profileImage.src}}setUserInfo(e,t){console.log(`Setting user info - Name: ${e}, Bio: ${t}`),console.log(this._profileName),console.log(this._profileBio),this._profileName.textContent=e,console.log(`Updating name: ${e}`),this._profileBio.textContent=t,console.log(`Updating bio: ${t}`)}setUserPicture(e){this._profileImage.src=e}}(a,c,m);p.getUserInfo().then((e=>{console.log(e);const t=e.name,s=e.about,r=e.avatar;console.log(t),console.log(s),g.setUserInfo(t,s),g.setUserPicture(r)})).catch((e=>{console.error(e)})),p.getInitialCards().then((e=>{f.items=e,f.renderItems()})).catch((e=>{console.error(e)}));const S=new class extends s{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._imageTitle=this._popupElement.querySelector(".modal__description")}open(e){this._image.src=e.link,this._image.alt=e.name,this._imageTitle.textContent=e.name,super.open()}}("#image");S.setEventListeners();const E=new r("#edit",(function(e){const t=e.name,s=e.bio;console.log(t),console.log(s),A((function(){return p.updateProfileInfo(t,s).then((()=>{g.setUserInfo(t,s),i.reset()}))}),E)}));E.setEventListeners();const b=new r("#add",(function(e){A((function(){return p.createCard({name:e.title,link:e.image}).then((e=>{!function(e){const t=B(e);f.addItem(t)}(e),b.close(),o.reset()}))}),b)}));b.setEventListeners();const v=new r("#profile",(function(e){A((function(){return p.updateAvatar(e.avatar).then((()=>{g.setUserPicture(e.avatar),v.close(),n.reset()}))}),v)}));v.setEventListeners();const L=new class extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._deleteSubmit=this._popupElement.querySelector("form"),this._deleteSubmitHandler=this._handleDeleteSubmit.bind(this)}open(){super.open(),this._popupElement.querySelector(".modal__button").focus()}setEventListeners(){super.setEventListeners(),this._deleteSubmit.addEventListener("submit",this._deleteSubmitHandler)}_handleDeleteSubmit(e){console.log("this is working"),e.preventDefault(),this._handleFormSubmit()}setSubmitAction(e){this._handleFormSubmit=e}}("#delete",x);L.setEventListeners();const y={};var k;k={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active"},Array.from(document.querySelectorAll(k.formSelector)).forEach((t=>{const s=new e(k,t),r=t.getAttribute("id");y[r]=s,s.enableValidation()}));const C=y["edit-form"],I=y["add-form"],q=y["profile-form"];function B(e){return console.log(e),new t(e,"#card-template",U,T,$,w).getView()}function U(e){S.open(e)}function $(e){p.likeCard(e._id).then((()=>{e.cardIsLiked(!0)})).catch((e=>{console.log(e)}))}function w(e){p.dislikeCard(e._id).then((()=>{e.cardIsLiked(!1)})).catch((e=>{console.error(e)}))}function A(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}function T(e){L.open(),L.setSubmitAction((()=>x(e)))}function x(e){console.log("Card ID for deletion:",e._id),p.deleteCard(e._id).then((()=>{e.removeCard(),L.close()})).catch((e=>{console.error(e)}))}l.addEventListener("click",(()=>{const e=g.getUserInfo();h.value=e.name,d.value=e.job,E.open(),C.toggleButtonState()})),u.addEventListener("click",(function(){b.open(),I.toggleButtonState()})),_.addEventListener("click",(()=>{v.open(),q.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,